//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuillDigital.QuillWebServices {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://quilldigital.co.uk/", ConfigurationName="QuillWebServices.WebServiceSoap")]
    public interface WebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFilePageCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFilePageCount(string fileID, string clientID, string clientSecret, string sqlConnection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFilePageCount", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFilePageCountAsync(string fileID, string clientID, string clientSecret, string sqlConnection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/PrepareRun", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PrepareRun(string clientID, string clientSecret, string sqlconn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/PrepareRun", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PrepareRunAsync(string clientID, string clientSecret, string sqlconn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/ResetFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ResetFields(string clientID, string clientSecret, string sqlconn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/ResetFields", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ResetFieldsAsync(string clientID, string clientSecret, string sqlconn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/CleanUpRun", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CleanUpRun(string clientID, string clientSecret, string sqlconn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/CleanUpRun", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CleanUpRunAsync(string clientID, string clientSecret, string sqlconn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/CustomRegex", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CustomRegex(string clientID, string clientSecret, string field, string text, string sqlConnection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/CustomRegex", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CustomRegexAsync(string clientID, string clientSecret, string field, string text, string sqlConnection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/Test", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/Test", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/TestException", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string TestException();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/TestException", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TestExceptionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/MakeCheckAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MakeCheckAll(string sqlConnection, string fieldName, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/MakeCheckAll", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MakeCheckAllAsync(string sqlConnection, string fieldName, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/AddField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddField(string sqlConnection, string fieldName, string fieldType, string checkall, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/AddField", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddFieldAsync(string sqlConnection, string fieldName, string fieldType, string checkall, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetPagesLeft", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPagesLeft(string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetPagesLeft", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPagesLeftAsync(string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetLanguages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetLanguages(string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetLanguages", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLanguagesAsync(string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetRefreshDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetRefreshDate(string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetRefreshDate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetRefreshDateAsync(string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldNames", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFieldNames(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldNames", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFieldNamesAsync(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/NativeTextCheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string NativeTextCheck(string fileName, string sqlcon, bool keepMetaData, string clientID, string clientSecret, string fileID, string ocrMetaCount, string ignoreMeta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/NativeTextCheck", ReplyAction="*")]
        System.Threading.Tasks.Task<string> NativeTextCheckAsync(string fileName, string sqlcon, bool keepMetaData, string clientID, string clientSecret, string fileID, string ocrMetaCount, string ignoreMeta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetStatus(string clientID, string clientSecret, string fileID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetStatusAsync(string clientID, string clientSecret, string fileID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFullTextByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFullTextByID(string fileID, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFullTextByID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFullTextByIDAsync(string fileID, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/ExtractFieldsByFileID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ExtractFieldsByFileID(string fileID, string clientDocPath, string clientID, string clientSecret, string sqlCon, string writeToDB, string fields, string keepAlive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/ExtractFieldsByFileID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ExtractFieldsByFileIDAsync(string fileID, string clientDocPath, string clientID, string clientSecret, string sqlCon, string writeToDB, string fields, string keepAlive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/Translate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Translate(string clientID, string clientSecret, string sqlCon, string textIN, string language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/Translate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TranslateAsync(string clientID, string clientSecret, string sqlCon, string textIN, string language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/TranslateByFileID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string TranslateByFileID(string clientID, string clientSecret, string sqlCon, string fileID, string language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/TranslateByFileID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TranslateByFileIDAsync(string clientID, string clientSecret, string sqlCon, string fileID, string language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/Digitise", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Digitise(string fileName, string fileID, string clientID, string clientSecret, string sqlCon, string OCRType, string grayScale, string DPI, string keepAlive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/Digitise", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DigitiseAsync(string fileName, string fileID, string clientID, string clientSecret, string sqlCon, string OCRType, string grayScale, string DPI, string keepAlive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/InsertFieldData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InsertFieldData(string[] arrStrAssociations, string sqlCon, string clientID, string clientSecret, string fileID, string Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/InsertFieldData", ReplyAction="*")]
        System.Threading.Tasks.Task<string> InsertFieldDataAsync(string[] arrStrAssociations, string sqlCon, string clientID, string clientSecret, string fileID, string Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/ProcessAudioFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ProcessAudioFile(string fileName, string fileID, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/ProcessAudioFile", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ProcessAudioFileAsync(string fileName, string fileID, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFileID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFileID(string fileName, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFileID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFileIDAsync(string fileName, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/DeleteClause", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeleteClause(string sqlConnection, string clientID, string clientSecret, string tagOne);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/DeleteClause", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DeleteClauseAsync(string sqlConnection, string clientID, string clientSecret, string tagOne);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/DeleteClausesByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeleteClausesByID(string sqlConnection, string clientID, string clientSecret, string tableID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/DeleteClausesByID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DeleteClausesByIDAsync(string sqlConnection, string clientID, string clientSecret, string tableID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetOCRThreshold", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetOCRThreshold(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetOCRThreshold", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetOCRThresholdAsync(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/DeleteOCRSettings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeleteOCRSettings(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/DeleteOCRSettings", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DeleteOCRSettingsAsync(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/UpdateOCRThreshold", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateOCRThreshold(string sqlConnection, string clientID, string clientSecret, string threshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/UpdateOCRThreshold", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateOCRThresholdAsync(string sqlConnection, string clientID, string clientSecret, string threshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetClausesByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetClausesByID(string clientID, string clientSecret, string sqlCon, string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetClausesByID", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetClausesByIDAsync(string clientID, string clientSecret, string sqlCon, string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetAllFilesInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetAllFilesInfo(string sqlCon, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetAllFilesInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllFilesInfoAsync(string sqlCon, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetClauses", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetClauses(string clientID, string clientSecret, string sqlCon, string tagOne);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetClauses", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetClausesAsync(string clientID, string clientSecret, string sqlCon, string tagOne);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetClause", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetClause(string clientID, string clientSecret, string sqlCon, string tagOne);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetClause", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetClauseAsync(string clientID, string clientSecret, string sqlCon, string tagOne);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetActiveDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetActiveDocuments(string clientID, string clientSecret, string sqlCon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetActiveDocuments", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetActiveDocumentsAsync(string clientID, string clientSecret, string sqlCon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetActiveDocumentsData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetActiveDocumentsData(string clientID, string clientSecret, string sqlCon, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetActiveDocumentsData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetActiveDocumentsDataAsync(string clientID, string clientSecret, string sqlCon, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetOCRSetting", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetOCRSetting(string clientID, string clientSecret, string sqlCon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetOCRSetting", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetOCRSettingAsync(string clientID, string clientSecret, string sqlCon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/CheckForClausesByFileID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckForClausesByFileID(string clientID, string clientSecret, string sqlCon, string fileID, string fileName, string tagOnes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/CheckForClausesByFileID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CheckForClausesByFileIDAsync(string clientID, string clientSecret, string sqlCon, string fileID, string fileName, string tagOnes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetReportByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetReportByID(string clientID, string clientSecret, string fileID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetReportByID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetReportByIDAsync(string clientID, string clientSecret, string fileID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFoundClausesByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetFoundClausesByID(string clientID, string clientSecret, string sqlCon, string fileID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFoundClausesByID", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetFoundClausesByIDAsync(string clientID, string clientSecret, string sqlCon, string fileID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/IsNegative", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string IsNegative(string Input, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/IsNegative", ReplyAction="*")]
        System.Threading.Tasks.Task<string> IsNegativeAsync(string Input, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/ProcessNLP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ProcessNLP(string clientID, string clientSecret, string text, string process, string singleOrPlural, string targetWord, string wordOrSentence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/ProcessNLP", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ProcessNLPAsync(string clientID, string clientSecret, string text, string process, string singleOrPlural, string targetWord, string wordOrSentence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/AbortOperation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AbortOperation(string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/AbortOperation", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AbortOperationAsync(string clientID, string clientSecret);
        
        // CODEGEN: Parameter 'fileByteArray' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/SaveClientFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        QuillDigital.QuillWebServices.SaveClientFileResponse SaveClientFile(QuillDigital.QuillWebServices.SaveClientFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/SaveClientFile", ReplyAction="*")]
        System.Threading.Tasks.Task<QuillDigital.QuillWebServices.SaveClientFileResponse> SaveClientFileAsync(QuillDigital.QuillWebServices.SaveClientFileRequest request);
        
        // CODEGEN: Parameter 'GetFilesResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        QuillDigital.QuillWebServices.GetFilesResponse GetFiles(QuillDigital.QuillWebServices.GetFilesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFiles", ReplyAction="*")]
        System.Threading.Tasks.Task<QuillDigital.QuillWebServices.GetFilesResponse> GetFilesAsync(QuillDigital.QuillWebServices.GetFilesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldWordPercision", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetFieldWordPercision(string sqlConnection, string clientID, string clientSecret, string fieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldWordPercision", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetFieldWordPercisionAsync(string sqlConnection, string clientID, string clientSecret, string fieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/CancelSubscription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CancelSubscription(string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/CancelSubscription", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CancelSubscriptionAsync(string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetFieldType(string sqlConnection, string clientID, string clientSecret, string fieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldType", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetFieldTypeAsync(string sqlConnection, string clientID, string clientSecret, string fieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/UpdateFieldWords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateFieldWords(string sqlConnection, string fieldName, string wordsUpdate, string clientID, string clientSecret, string Pforward, string PBack);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/UpdateFieldWords", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateFieldWordsAsync(string sqlConnection, string fieldName, string wordsUpdate, string clientID, string clientSecret, string Pforward, string PBack);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/UpdateFieldRegex", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateFieldRegex(string sqlConnection, string fieldName, string regex, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/UpdateFieldRegex", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateFieldRegexAsync(string sqlConnection, string fieldName, string regex, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/UpdateFieldDeDupe", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateFieldDeDupe(string sqlConnection, string fieldName, string dedupe, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/UpdateFieldDeDupe", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateFieldDeDupeAsync(string sqlConnection, string fieldName, string dedupe, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/UpdateFieldCurrencySymbolOnly", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateFieldCurrencySymbolOnly(string sqlConnection, string fieldName, string symbolOnly, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/UpdateFieldCurrencySymbolOnly", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateFieldCurrencySymbolOnlyAsync(string sqlConnection, string fieldName, string symbolOnly, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldRegex", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFieldRegex(string sqlConnection, string fieldName, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldRegex", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFieldRegexAsync(string sqlConnection, string fieldName, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/UpdateFieldPhrases", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateFieldPhrases(string sqlConnection, string clientID, string clientSecret, string fieldName, string phraseUpdate, string precision);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/UpdateFieldPhrases", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateFieldPhrasesAsync(string sqlConnection, string clientID, string clientSecret, string fieldName, string phraseUpdate, string precision);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/DeleteField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeleteField(string sqlConnection, string clientID, string clientSecret, string fieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/DeleteField", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DeleteFieldAsync(string sqlConnection, string clientID, string clientSecret, string fieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/DeleteFieldWord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeleteFieldWord(string sqlConnection, string clientID, string clientSecret, string fieldName, string word);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/DeleteFieldWord", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DeleteFieldWordAsync(string sqlConnection, string clientID, string clientSecret, string fieldName, string word);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/CheckKeyInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckKeyInfo(string key, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/CheckKeyInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CheckKeyInfoAsync(string key, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/DeleteFieldPhrases", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DeleteFieldPhrases(string sqlConnection, string clientID, string clientSecret, string phrase, string fieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/DeleteFieldPhrases", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DeleteFieldPhrasesAsync(string sqlConnection, string clientID, string clientSecret, string phrase, string fieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/CreateClause", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CreateClause(string sqlConnection, string clientID, string clientSecret, string Clause, string tagOne, string tagTwo, string tagThree, string tagFour, string tagFive, string threshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/CreateClause", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CreateClauseAsync(string sqlConnection, string clientID, string clientSecret, string Clause, string tagOne, string tagTwo, string tagThree, string tagFour, string tagFive, string threshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldWords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetFieldWords(string sqlConnection, string clientID, string clientSecret, string field);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldWords", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetFieldWordsAsync(string sqlConnection, string clientID, string clientSecret, string field);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetCommonField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCommonField(string sqlConnection, string clientID, string clientSecret, string field);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetCommonField", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetCommonFieldAsync(string sqlConnection, string clientID, string clientSecret, string field);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetCommonFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCommonFields(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetCommonFields", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetCommonFieldsAsync(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetFields(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFields", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetFieldsAsync(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldsAsString", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFieldsAsString(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldsAsString", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFieldsAsStringAsync(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldNamesAsString", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFieldNamesAsString(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldNamesAsString", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFieldNamesAsStringAsync(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetAllFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetAllFields(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetAllFields", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllFieldsAsync(string sqlConnection, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldPhrases", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetFieldPhrases(string sqlConnection, string clientID, string clientSecret, string field);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetFieldPhrases", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetFieldPhrasesAsync(string sqlConnection, string clientID, string clientSecret, string field);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetPageText", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPageText(string sqlConnection, string fileID, int pageNumber, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetPageText", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPageTextAsync(string sqlConnection, string fileID, int pageNumber, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetOCRPageCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetOCRPageCount(string fileID, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetOCRPageCount", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetOCRPageCountAsync(string fileID, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetNativePageCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetNativePageCount(string fileID, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetNativePageCount", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetNativePageCountAsync(string fileID, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetProcessedPageCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetProcessedPageCount(string sqlConnection, string fileID, string clientID, string clientSecret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://quilldigital.co.uk/GetProcessedPageCount", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetProcessedPageCountAsync(string sqlConnection, string fileID, string clientID, string clientSecret);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SaveClientFile", WrapperNamespace="http://quilldigital.co.uk/", IsWrapped=true)]
    public partial class SaveClientFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://quilldigital.co.uk/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] fileByteArray;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://quilldigital.co.uk/", Order=1)]
        public string fileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://quilldigital.co.uk/", Order=2)]
        public string clientID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://quilldigital.co.uk/", Order=3)]
        public string clientSecret;
        
        public SaveClientFileRequest() {
        }
        
        public SaveClientFileRequest(byte[] fileByteArray, string fileName, string clientID, string clientSecret) {
            this.fileByteArray = fileByteArray;
            this.fileName = fileName;
            this.clientID = clientID;
            this.clientSecret = clientSecret;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SaveClientFileResponse", WrapperNamespace="http://quilldigital.co.uk/", IsWrapped=true)]
    public partial class SaveClientFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://quilldigital.co.uk/", Order=0)]
        public string SaveClientFileResult;
        
        public SaveClientFileResponse() {
        }
        
        public SaveClientFileResponse(string SaveClientFileResult) {
            this.SaveClientFileResult = SaveClientFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFiles", WrapperNamespace="http://quilldigital.co.uk/", IsWrapped=true)]
    public partial class GetFilesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://quilldigital.co.uk/", Order=0)]
        public string fileID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://quilldigital.co.uk/", Order=1)]
        public string clientID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://quilldigital.co.uk/", Order=2)]
        public string clientSecret;
        
        public GetFilesRequest() {
        }
        
        public GetFilesRequest(string fileID, string clientID, string clientSecret) {
            this.fileID = fileID;
            this.clientID = clientID;
            this.clientSecret = clientSecret;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFilesResponse", WrapperNamespace="http://quilldigital.co.uk/", IsWrapped=true)]
    public partial class GetFilesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://quilldigital.co.uk/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFilesResult;
        
        public GetFilesResponse() {
        }
        
        public GetFilesResponse(byte[] GetFilesResult) {
            this.GetFilesResult = GetFilesResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebServiceSoapChannel : QuillDigital.QuillWebServices.WebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServiceSoapClient : System.ServiceModel.ClientBase<QuillDigital.QuillWebServices.WebServiceSoap>, QuillDigital.QuillWebServices.WebServiceSoap {
        
        public WebServiceSoapClient() {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetFilePageCount(string fileID, string clientID, string clientSecret, string sqlConnection) {
            return base.Channel.GetFilePageCount(fileID, clientID, clientSecret, sqlConnection);
        }
        
        public System.Threading.Tasks.Task<string> GetFilePageCountAsync(string fileID, string clientID, string clientSecret, string sqlConnection) {
            return base.Channel.GetFilePageCountAsync(fileID, clientID, clientSecret, sqlConnection);
        }
        
        public string PrepareRun(string clientID, string clientSecret, string sqlconn) {
            return base.Channel.PrepareRun(clientID, clientSecret, sqlconn);
        }
        
        public System.Threading.Tasks.Task<string> PrepareRunAsync(string clientID, string clientSecret, string sqlconn) {
            return base.Channel.PrepareRunAsync(clientID, clientSecret, sqlconn);
        }
        
        public string ResetFields(string clientID, string clientSecret, string sqlconn) {
            return base.Channel.ResetFields(clientID, clientSecret, sqlconn);
        }
        
        public System.Threading.Tasks.Task<string> ResetFieldsAsync(string clientID, string clientSecret, string sqlconn) {
            return base.Channel.ResetFieldsAsync(clientID, clientSecret, sqlconn);
        }
        
        public string CleanUpRun(string clientID, string clientSecret, string sqlconn) {
            return base.Channel.CleanUpRun(clientID, clientSecret, sqlconn);
        }
        
        public System.Threading.Tasks.Task<string> CleanUpRunAsync(string clientID, string clientSecret, string sqlconn) {
            return base.Channel.CleanUpRunAsync(clientID, clientSecret, sqlconn);
        }
        
        public string CustomRegex(string clientID, string clientSecret, string field, string text, string sqlConnection) {
            return base.Channel.CustomRegex(clientID, clientSecret, field, text, sqlConnection);
        }
        
        public System.Threading.Tasks.Task<string> CustomRegexAsync(string clientID, string clientSecret, string field, string text, string sqlConnection) {
            return base.Channel.CustomRegexAsync(clientID, clientSecret, field, text, sqlConnection);
        }
        
        public string Test() {
            return base.Channel.Test();
        }
        
        public System.Threading.Tasks.Task<string> TestAsync() {
            return base.Channel.TestAsync();
        }
        
        public string TestException() {
            return base.Channel.TestException();
        }
        
        public System.Threading.Tasks.Task<string> TestExceptionAsync() {
            return base.Channel.TestExceptionAsync();
        }
        
        public string MakeCheckAll(string sqlConnection, string fieldName, string clientID, string clientSecret) {
            return base.Channel.MakeCheckAll(sqlConnection, fieldName, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> MakeCheckAllAsync(string sqlConnection, string fieldName, string clientID, string clientSecret) {
            return base.Channel.MakeCheckAllAsync(sqlConnection, fieldName, clientID, clientSecret);
        }
        
        public string AddField(string sqlConnection, string fieldName, string fieldType, string checkall, string clientID, string clientSecret) {
            return base.Channel.AddField(sqlConnection, fieldName, fieldType, checkall, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> AddFieldAsync(string sqlConnection, string fieldName, string fieldType, string checkall, string clientID, string clientSecret) {
            return base.Channel.AddFieldAsync(sqlConnection, fieldName, fieldType, checkall, clientID, clientSecret);
        }
        
        public string GetPagesLeft(string clientID, string clientSecret) {
            return base.Channel.GetPagesLeft(clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> GetPagesLeftAsync(string clientID, string clientSecret) {
            return base.Channel.GetPagesLeftAsync(clientID, clientSecret);
        }
        
        public System.Data.DataTable GetLanguages(string clientID, string clientSecret) {
            return base.Channel.GetLanguages(clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLanguagesAsync(string clientID, string clientSecret) {
            return base.Channel.GetLanguagesAsync(clientID, clientSecret);
        }
        
        public string GetRefreshDate(string clientID, string clientSecret) {
            return base.Channel.GetRefreshDate(clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> GetRefreshDateAsync(string clientID, string clientSecret) {
            return base.Channel.GetRefreshDateAsync(clientID, clientSecret);
        }
        
        public string GetFieldNames(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetFieldNames(sqlConnection, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> GetFieldNamesAsync(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetFieldNamesAsync(sqlConnection, clientID, clientSecret);
        }
        
        public string NativeTextCheck(string fileName, string sqlcon, bool keepMetaData, string clientID, string clientSecret, string fileID, string ocrMetaCount, string ignoreMeta) {
            return base.Channel.NativeTextCheck(fileName, sqlcon, keepMetaData, clientID, clientSecret, fileID, ocrMetaCount, ignoreMeta);
        }
        
        public System.Threading.Tasks.Task<string> NativeTextCheckAsync(string fileName, string sqlcon, bool keepMetaData, string clientID, string clientSecret, string fileID, string ocrMetaCount, string ignoreMeta) {
            return base.Channel.NativeTextCheckAsync(fileName, sqlcon, keepMetaData, clientID, clientSecret, fileID, ocrMetaCount, ignoreMeta);
        }
        
        public string GetStatus(string clientID, string clientSecret, string fileID) {
            return base.Channel.GetStatus(clientID, clientSecret, fileID);
        }
        
        public System.Threading.Tasks.Task<string> GetStatusAsync(string clientID, string clientSecret, string fileID) {
            return base.Channel.GetStatusAsync(clientID, clientSecret, fileID);
        }
        
        public string GetFullTextByID(string fileID, string clientID, string clientSecret) {
            return base.Channel.GetFullTextByID(fileID, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> GetFullTextByIDAsync(string fileID, string clientID, string clientSecret) {
            return base.Channel.GetFullTextByIDAsync(fileID, clientID, clientSecret);
        }
        
        public string ExtractFieldsByFileID(string fileID, string clientDocPath, string clientID, string clientSecret, string sqlCon, string writeToDB, string fields, string keepAlive) {
            return base.Channel.ExtractFieldsByFileID(fileID, clientDocPath, clientID, clientSecret, sqlCon, writeToDB, fields, keepAlive);
        }
        
        public System.Threading.Tasks.Task<string> ExtractFieldsByFileIDAsync(string fileID, string clientDocPath, string clientID, string clientSecret, string sqlCon, string writeToDB, string fields, string keepAlive) {
            return base.Channel.ExtractFieldsByFileIDAsync(fileID, clientDocPath, clientID, clientSecret, sqlCon, writeToDB, fields, keepAlive);
        }
        
        public string Translate(string clientID, string clientSecret, string sqlCon, string textIN, string language) {
            return base.Channel.Translate(clientID, clientSecret, sqlCon, textIN, language);
        }
        
        public System.Threading.Tasks.Task<string> TranslateAsync(string clientID, string clientSecret, string sqlCon, string textIN, string language) {
            return base.Channel.TranslateAsync(clientID, clientSecret, sqlCon, textIN, language);
        }
        
        public string TranslateByFileID(string clientID, string clientSecret, string sqlCon, string fileID, string language) {
            return base.Channel.TranslateByFileID(clientID, clientSecret, sqlCon, fileID, language);
        }
        
        public System.Threading.Tasks.Task<string> TranslateByFileIDAsync(string clientID, string clientSecret, string sqlCon, string fileID, string language) {
            return base.Channel.TranslateByFileIDAsync(clientID, clientSecret, sqlCon, fileID, language);
        }
        
        public string Digitise(string fileName, string fileID, string clientID, string clientSecret, string sqlCon, string OCRType, string grayScale, string DPI, string keepAlive) {
            return base.Channel.Digitise(fileName, fileID, clientID, clientSecret, sqlCon, OCRType, grayScale, DPI, keepAlive);
        }
        
        public System.Threading.Tasks.Task<string> DigitiseAsync(string fileName, string fileID, string clientID, string clientSecret, string sqlCon, string OCRType, string grayScale, string DPI, string keepAlive) {
            return base.Channel.DigitiseAsync(fileName, fileID, clientID, clientSecret, sqlCon, OCRType, grayScale, DPI, keepAlive);
        }
        
        public string InsertFieldData(string[] arrStrAssociations, string sqlCon, string clientID, string clientSecret, string fileID, string Value) {
            return base.Channel.InsertFieldData(arrStrAssociations, sqlCon, clientID, clientSecret, fileID, Value);
        }
        
        public System.Threading.Tasks.Task<string> InsertFieldDataAsync(string[] arrStrAssociations, string sqlCon, string clientID, string clientSecret, string fileID, string Value) {
            return base.Channel.InsertFieldDataAsync(arrStrAssociations, sqlCon, clientID, clientSecret, fileID, Value);
        }
        
        public string ProcessAudioFile(string fileName, string fileID, string clientID, string clientSecret) {
            return base.Channel.ProcessAudioFile(fileName, fileID, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> ProcessAudioFileAsync(string fileName, string fileID, string clientID, string clientSecret) {
            return base.Channel.ProcessAudioFileAsync(fileName, fileID, clientID, clientSecret);
        }
        
        public string GetFileID(string fileName, string clientID, string clientSecret) {
            return base.Channel.GetFileID(fileName, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> GetFileIDAsync(string fileName, string clientID, string clientSecret) {
            return base.Channel.GetFileIDAsync(fileName, clientID, clientSecret);
        }
        
        public string DeleteClause(string sqlConnection, string clientID, string clientSecret, string tagOne) {
            return base.Channel.DeleteClause(sqlConnection, clientID, clientSecret, tagOne);
        }
        
        public System.Threading.Tasks.Task<string> DeleteClauseAsync(string sqlConnection, string clientID, string clientSecret, string tagOne) {
            return base.Channel.DeleteClauseAsync(sqlConnection, clientID, clientSecret, tagOne);
        }
        
        public string DeleteClausesByID(string sqlConnection, string clientID, string clientSecret, string tableID) {
            return base.Channel.DeleteClausesByID(sqlConnection, clientID, clientSecret, tableID);
        }
        
        public System.Threading.Tasks.Task<string> DeleteClausesByIDAsync(string sqlConnection, string clientID, string clientSecret, string tableID) {
            return base.Channel.DeleteClausesByIDAsync(sqlConnection, clientID, clientSecret, tableID);
        }
        
        public string GetOCRThreshold(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetOCRThreshold(sqlConnection, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> GetOCRThresholdAsync(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetOCRThresholdAsync(sqlConnection, clientID, clientSecret);
        }
        
        public string DeleteOCRSettings(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.DeleteOCRSettings(sqlConnection, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> DeleteOCRSettingsAsync(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.DeleteOCRSettingsAsync(sqlConnection, clientID, clientSecret);
        }
        
        public string UpdateOCRThreshold(string sqlConnection, string clientID, string clientSecret, string threshold) {
            return base.Channel.UpdateOCRThreshold(sqlConnection, clientID, clientSecret, threshold);
        }
        
        public System.Threading.Tasks.Task<string> UpdateOCRThresholdAsync(string sqlConnection, string clientID, string clientSecret, string threshold) {
            return base.Channel.UpdateOCRThresholdAsync(sqlConnection, clientID, clientSecret, threshold);
        }
        
        public System.Data.DataTable GetClausesByID(string clientID, string clientSecret, string sqlCon, string ID) {
            return base.Channel.GetClausesByID(clientID, clientSecret, sqlCon, ID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetClausesByIDAsync(string clientID, string clientSecret, string sqlCon, string ID) {
            return base.Channel.GetClausesByIDAsync(clientID, clientSecret, sqlCon, ID);
        }
        
        public System.Data.DataTable GetAllFilesInfo(string sqlCon, string clientID, string clientSecret) {
            return base.Channel.GetAllFilesInfo(sqlCon, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllFilesInfoAsync(string sqlCon, string clientID, string clientSecret) {
            return base.Channel.GetAllFilesInfoAsync(sqlCon, clientID, clientSecret);
        }
        
        public System.Data.DataTable GetClauses(string clientID, string clientSecret, string sqlCon, string tagOne) {
            return base.Channel.GetClauses(clientID, clientSecret, sqlCon, tagOne);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetClausesAsync(string clientID, string clientSecret, string sqlCon, string tagOne) {
            return base.Channel.GetClausesAsync(clientID, clientSecret, sqlCon, tagOne);
        }
        
        public System.Data.DataTable GetClause(string clientID, string clientSecret, string sqlCon, string tagOne) {
            return base.Channel.GetClause(clientID, clientSecret, sqlCon, tagOne);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetClauseAsync(string clientID, string clientSecret, string sqlCon, string tagOne) {
            return base.Channel.GetClauseAsync(clientID, clientSecret, sqlCon, tagOne);
        }
        
        public System.Data.DataTable GetActiveDocuments(string clientID, string clientSecret, string sqlCon) {
            return base.Channel.GetActiveDocuments(clientID, clientSecret, sqlCon);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetActiveDocumentsAsync(string clientID, string clientSecret, string sqlCon) {
            return base.Channel.GetActiveDocumentsAsync(clientID, clientSecret, sqlCon);
        }
        
        public System.Data.DataTable GetActiveDocumentsData(string clientID, string clientSecret, string sqlCon, string fileName) {
            return base.Channel.GetActiveDocumentsData(clientID, clientSecret, sqlCon, fileName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetActiveDocumentsDataAsync(string clientID, string clientSecret, string sqlCon, string fileName) {
            return base.Channel.GetActiveDocumentsDataAsync(clientID, clientSecret, sqlCon, fileName);
        }
        
        public System.Data.DataTable GetOCRSetting(string clientID, string clientSecret, string sqlCon) {
            return base.Channel.GetOCRSetting(clientID, clientSecret, sqlCon);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetOCRSettingAsync(string clientID, string clientSecret, string sqlCon) {
            return base.Channel.GetOCRSettingAsync(clientID, clientSecret, sqlCon);
        }
        
        public string CheckForClausesByFileID(string clientID, string clientSecret, string sqlCon, string fileID, string fileName, string tagOnes) {
            return base.Channel.CheckForClausesByFileID(clientID, clientSecret, sqlCon, fileID, fileName, tagOnes);
        }
        
        public System.Threading.Tasks.Task<string> CheckForClausesByFileIDAsync(string clientID, string clientSecret, string sqlCon, string fileID, string fileName, string tagOnes) {
            return base.Channel.CheckForClausesByFileIDAsync(clientID, clientSecret, sqlCon, fileID, fileName, tagOnes);
        }
        
        public string GetReportByID(string clientID, string clientSecret, string fileID) {
            return base.Channel.GetReportByID(clientID, clientSecret, fileID);
        }
        
        public System.Threading.Tasks.Task<string> GetReportByIDAsync(string clientID, string clientSecret, string fileID) {
            return base.Channel.GetReportByIDAsync(clientID, clientSecret, fileID);
        }
        
        public System.Data.DataTable GetFoundClausesByID(string clientID, string clientSecret, string sqlCon, string fileID) {
            return base.Channel.GetFoundClausesByID(clientID, clientSecret, sqlCon, fileID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetFoundClausesByIDAsync(string clientID, string clientSecret, string sqlCon, string fileID) {
            return base.Channel.GetFoundClausesByIDAsync(clientID, clientSecret, sqlCon, fileID);
        }
        
        public string IsNegative(string Input, string clientID, string clientSecret) {
            return base.Channel.IsNegative(Input, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> IsNegativeAsync(string Input, string clientID, string clientSecret) {
            return base.Channel.IsNegativeAsync(Input, clientID, clientSecret);
        }
        
        public string ProcessNLP(string clientID, string clientSecret, string text, string process, string singleOrPlural, string targetWord, string wordOrSentence) {
            return base.Channel.ProcessNLP(clientID, clientSecret, text, process, singleOrPlural, targetWord, wordOrSentence);
        }
        
        public System.Threading.Tasks.Task<string> ProcessNLPAsync(string clientID, string clientSecret, string text, string process, string singleOrPlural, string targetWord, string wordOrSentence) {
            return base.Channel.ProcessNLPAsync(clientID, clientSecret, text, process, singleOrPlural, targetWord, wordOrSentence);
        }
        
        public string AbortOperation(string clientID, string clientSecret) {
            return base.Channel.AbortOperation(clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> AbortOperationAsync(string clientID, string clientSecret) {
            return base.Channel.AbortOperationAsync(clientID, clientSecret);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        QuillDigital.QuillWebServices.SaveClientFileResponse QuillDigital.QuillWebServices.WebServiceSoap.SaveClientFile(QuillDigital.QuillWebServices.SaveClientFileRequest request) {
            return base.Channel.SaveClientFile(request);
        }
        
        public string SaveClientFile(byte[] fileByteArray, string fileName, string clientID, string clientSecret) {
            QuillDigital.QuillWebServices.SaveClientFileRequest inValue = new QuillDigital.QuillWebServices.SaveClientFileRequest();
            inValue.fileByteArray = fileByteArray;
            inValue.fileName = fileName;
            inValue.clientID = clientID;
            inValue.clientSecret = clientSecret;
            QuillDigital.QuillWebServices.SaveClientFileResponse retVal = ((QuillDigital.QuillWebServices.WebServiceSoap)(this)).SaveClientFile(inValue);
            return retVal.SaveClientFileResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<QuillDigital.QuillWebServices.SaveClientFileResponse> QuillDigital.QuillWebServices.WebServiceSoap.SaveClientFileAsync(QuillDigital.QuillWebServices.SaveClientFileRequest request) {
            return base.Channel.SaveClientFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<QuillDigital.QuillWebServices.SaveClientFileResponse> SaveClientFileAsync(byte[] fileByteArray, string fileName, string clientID, string clientSecret) {
            QuillDigital.QuillWebServices.SaveClientFileRequest inValue = new QuillDigital.QuillWebServices.SaveClientFileRequest();
            inValue.fileByteArray = fileByteArray;
            inValue.fileName = fileName;
            inValue.clientID = clientID;
            inValue.clientSecret = clientSecret;
            return ((QuillDigital.QuillWebServices.WebServiceSoap)(this)).SaveClientFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        QuillDigital.QuillWebServices.GetFilesResponse QuillDigital.QuillWebServices.WebServiceSoap.GetFiles(QuillDigital.QuillWebServices.GetFilesRequest request) {
            return base.Channel.GetFiles(request);
        }
        
        public byte[] GetFiles(string fileID, string clientID, string clientSecret) {
            QuillDigital.QuillWebServices.GetFilesRequest inValue = new QuillDigital.QuillWebServices.GetFilesRequest();
            inValue.fileID = fileID;
            inValue.clientID = clientID;
            inValue.clientSecret = clientSecret;
            QuillDigital.QuillWebServices.GetFilesResponse retVal = ((QuillDigital.QuillWebServices.WebServiceSoap)(this)).GetFiles(inValue);
            return retVal.GetFilesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<QuillDigital.QuillWebServices.GetFilesResponse> QuillDigital.QuillWebServices.WebServiceSoap.GetFilesAsync(QuillDigital.QuillWebServices.GetFilesRequest request) {
            return base.Channel.GetFilesAsync(request);
        }
        
        public System.Threading.Tasks.Task<QuillDigital.QuillWebServices.GetFilesResponse> GetFilesAsync(string fileID, string clientID, string clientSecret) {
            QuillDigital.QuillWebServices.GetFilesRequest inValue = new QuillDigital.QuillWebServices.GetFilesRequest();
            inValue.fileID = fileID;
            inValue.clientID = clientID;
            inValue.clientSecret = clientSecret;
            return ((QuillDigital.QuillWebServices.WebServiceSoap)(this)).GetFilesAsync(inValue);
        }
        
        public System.Data.DataTable GetFieldWordPercision(string sqlConnection, string clientID, string clientSecret, string fieldName) {
            return base.Channel.GetFieldWordPercision(sqlConnection, clientID, clientSecret, fieldName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetFieldWordPercisionAsync(string sqlConnection, string clientID, string clientSecret, string fieldName) {
            return base.Channel.GetFieldWordPercisionAsync(sqlConnection, clientID, clientSecret, fieldName);
        }
        
        public string CancelSubscription(string clientID, string clientSecret) {
            return base.Channel.CancelSubscription(clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> CancelSubscriptionAsync(string clientID, string clientSecret) {
            return base.Channel.CancelSubscriptionAsync(clientID, clientSecret);
        }
        
        public System.Data.DataTable GetFieldType(string sqlConnection, string clientID, string clientSecret, string fieldName) {
            return base.Channel.GetFieldType(sqlConnection, clientID, clientSecret, fieldName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetFieldTypeAsync(string sqlConnection, string clientID, string clientSecret, string fieldName) {
            return base.Channel.GetFieldTypeAsync(sqlConnection, clientID, clientSecret, fieldName);
        }
        
        public string UpdateFieldWords(string sqlConnection, string fieldName, string wordsUpdate, string clientID, string clientSecret, string Pforward, string PBack) {
            return base.Channel.UpdateFieldWords(sqlConnection, fieldName, wordsUpdate, clientID, clientSecret, Pforward, PBack);
        }
        
        public System.Threading.Tasks.Task<string> UpdateFieldWordsAsync(string sqlConnection, string fieldName, string wordsUpdate, string clientID, string clientSecret, string Pforward, string PBack) {
            return base.Channel.UpdateFieldWordsAsync(sqlConnection, fieldName, wordsUpdate, clientID, clientSecret, Pforward, PBack);
        }
        
        public string UpdateFieldRegex(string sqlConnection, string fieldName, string regex, string clientID, string clientSecret) {
            return base.Channel.UpdateFieldRegex(sqlConnection, fieldName, regex, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> UpdateFieldRegexAsync(string sqlConnection, string fieldName, string regex, string clientID, string clientSecret) {
            return base.Channel.UpdateFieldRegexAsync(sqlConnection, fieldName, regex, clientID, clientSecret);
        }
        
        public string UpdateFieldDeDupe(string sqlConnection, string fieldName, string dedupe, string clientID, string clientSecret) {
            return base.Channel.UpdateFieldDeDupe(sqlConnection, fieldName, dedupe, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> UpdateFieldDeDupeAsync(string sqlConnection, string fieldName, string dedupe, string clientID, string clientSecret) {
            return base.Channel.UpdateFieldDeDupeAsync(sqlConnection, fieldName, dedupe, clientID, clientSecret);
        }
        
        public string UpdateFieldCurrencySymbolOnly(string sqlConnection, string fieldName, string symbolOnly, string clientID, string clientSecret) {
            return base.Channel.UpdateFieldCurrencySymbolOnly(sqlConnection, fieldName, symbolOnly, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> UpdateFieldCurrencySymbolOnlyAsync(string sqlConnection, string fieldName, string symbolOnly, string clientID, string clientSecret) {
            return base.Channel.UpdateFieldCurrencySymbolOnlyAsync(sqlConnection, fieldName, symbolOnly, clientID, clientSecret);
        }
        
        public string GetFieldRegex(string sqlConnection, string fieldName, string clientID, string clientSecret) {
            return base.Channel.GetFieldRegex(sqlConnection, fieldName, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> GetFieldRegexAsync(string sqlConnection, string fieldName, string clientID, string clientSecret) {
            return base.Channel.GetFieldRegexAsync(sqlConnection, fieldName, clientID, clientSecret);
        }
        
        public string UpdateFieldPhrases(string sqlConnection, string clientID, string clientSecret, string fieldName, string phraseUpdate, string precision) {
            return base.Channel.UpdateFieldPhrases(sqlConnection, clientID, clientSecret, fieldName, phraseUpdate, precision);
        }
        
        public System.Threading.Tasks.Task<string> UpdateFieldPhrasesAsync(string sqlConnection, string clientID, string clientSecret, string fieldName, string phraseUpdate, string precision) {
            return base.Channel.UpdateFieldPhrasesAsync(sqlConnection, clientID, clientSecret, fieldName, phraseUpdate, precision);
        }
        
        public string DeleteField(string sqlConnection, string clientID, string clientSecret, string fieldName) {
            return base.Channel.DeleteField(sqlConnection, clientID, clientSecret, fieldName);
        }
        
        public System.Threading.Tasks.Task<string> DeleteFieldAsync(string sqlConnection, string clientID, string clientSecret, string fieldName) {
            return base.Channel.DeleteFieldAsync(sqlConnection, clientID, clientSecret, fieldName);
        }
        
        public string DeleteFieldWord(string sqlConnection, string clientID, string clientSecret, string fieldName, string word) {
            return base.Channel.DeleteFieldWord(sqlConnection, clientID, clientSecret, fieldName, word);
        }
        
        public System.Threading.Tasks.Task<string> DeleteFieldWordAsync(string sqlConnection, string clientID, string clientSecret, string fieldName, string word) {
            return base.Channel.DeleteFieldWordAsync(sqlConnection, clientID, clientSecret, fieldName, word);
        }
        
        public string CheckKeyInfo(string key, string clientSecret) {
            return base.Channel.CheckKeyInfo(key, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> CheckKeyInfoAsync(string key, string clientSecret) {
            return base.Channel.CheckKeyInfoAsync(key, clientSecret);
        }
        
        public string DeleteFieldPhrases(string sqlConnection, string clientID, string clientSecret, string phrase, string fieldName) {
            return base.Channel.DeleteFieldPhrases(sqlConnection, clientID, clientSecret, phrase, fieldName);
        }
        
        public System.Threading.Tasks.Task<string> DeleteFieldPhrasesAsync(string sqlConnection, string clientID, string clientSecret, string phrase, string fieldName) {
            return base.Channel.DeleteFieldPhrasesAsync(sqlConnection, clientID, clientSecret, phrase, fieldName);
        }
        
        public string CreateClause(string sqlConnection, string clientID, string clientSecret, string Clause, string tagOne, string tagTwo, string tagThree, string tagFour, string tagFive, string threshold) {
            return base.Channel.CreateClause(sqlConnection, clientID, clientSecret, Clause, tagOne, tagTwo, tagThree, tagFour, tagFive, threshold);
        }
        
        public System.Threading.Tasks.Task<string> CreateClauseAsync(string sqlConnection, string clientID, string clientSecret, string Clause, string tagOne, string tagTwo, string tagThree, string tagFour, string tagFive, string threshold) {
            return base.Channel.CreateClauseAsync(sqlConnection, clientID, clientSecret, Clause, tagOne, tagTwo, tagThree, tagFour, tagFive, threshold);
        }
        
        public System.Data.DataTable GetFieldWords(string sqlConnection, string clientID, string clientSecret, string field) {
            return base.Channel.GetFieldWords(sqlConnection, clientID, clientSecret, field);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetFieldWordsAsync(string sqlConnection, string clientID, string clientSecret, string field) {
            return base.Channel.GetFieldWordsAsync(sqlConnection, clientID, clientSecret, field);
        }
        
        public System.Data.DataTable GetCommonField(string sqlConnection, string clientID, string clientSecret, string field) {
            return base.Channel.GetCommonField(sqlConnection, clientID, clientSecret, field);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetCommonFieldAsync(string sqlConnection, string clientID, string clientSecret, string field) {
            return base.Channel.GetCommonFieldAsync(sqlConnection, clientID, clientSecret, field);
        }
        
        public System.Data.DataTable GetCommonFields(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetCommonFields(sqlConnection, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetCommonFieldsAsync(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetCommonFieldsAsync(sqlConnection, clientID, clientSecret);
        }
        
        public System.Data.DataTable GetFields(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetFields(sqlConnection, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetFieldsAsync(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetFieldsAsync(sqlConnection, clientID, clientSecret);
        }
        
        public string GetFieldsAsString(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetFieldsAsString(sqlConnection, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> GetFieldsAsStringAsync(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetFieldsAsStringAsync(sqlConnection, clientID, clientSecret);
        }
        
        public string GetFieldNamesAsString(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetFieldNamesAsString(sqlConnection, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> GetFieldNamesAsStringAsync(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetFieldNamesAsStringAsync(sqlConnection, clientID, clientSecret);
        }
        
        public System.Data.DataTable GetAllFields(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetAllFields(sqlConnection, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllFieldsAsync(string sqlConnection, string clientID, string clientSecret) {
            return base.Channel.GetAllFieldsAsync(sqlConnection, clientID, clientSecret);
        }
        
        public System.Data.DataTable GetFieldPhrases(string sqlConnection, string clientID, string clientSecret, string field) {
            return base.Channel.GetFieldPhrases(sqlConnection, clientID, clientSecret, field);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetFieldPhrasesAsync(string sqlConnection, string clientID, string clientSecret, string field) {
            return base.Channel.GetFieldPhrasesAsync(sqlConnection, clientID, clientSecret, field);
        }
        
        public string GetPageText(string sqlConnection, string fileID, int pageNumber, string clientID, string clientSecret) {
            return base.Channel.GetPageText(sqlConnection, fileID, pageNumber, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> GetPageTextAsync(string sqlConnection, string fileID, int pageNumber, string clientID, string clientSecret) {
            return base.Channel.GetPageTextAsync(sqlConnection, fileID, pageNumber, clientID, clientSecret);
        }
        
        public string GetOCRPageCount(string fileID, string clientID, string clientSecret) {
            return base.Channel.GetOCRPageCount(fileID, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> GetOCRPageCountAsync(string fileID, string clientID, string clientSecret) {
            return base.Channel.GetOCRPageCountAsync(fileID, clientID, clientSecret);
        }
        
        public string GetNativePageCount(string fileID, string clientID, string clientSecret) {
            return base.Channel.GetNativePageCount(fileID, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> GetNativePageCountAsync(string fileID, string clientID, string clientSecret) {
            return base.Channel.GetNativePageCountAsync(fileID, clientID, clientSecret);
        }
        
        public string GetProcessedPageCount(string sqlConnection, string fileID, string clientID, string clientSecret) {
            return base.Channel.GetProcessedPageCount(sqlConnection, fileID, clientID, clientSecret);
        }
        
        public System.Threading.Tasks.Task<string> GetProcessedPageCountAsync(string sqlConnection, string fileID, string clientID, string clientSecret) {
            return base.Channel.GetProcessedPageCountAsync(sqlConnection, fileID, clientID, clientSecret);
        }
    }
}
